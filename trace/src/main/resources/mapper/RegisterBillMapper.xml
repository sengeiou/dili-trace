<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.trace.dao.RegisterBillMapper">
  <resultMap id="BaseResultMap" type="com.dili.trace.domain.RegisterBill">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="register_source" jdbcType="TINYINT" property="registerSource" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="id_card_no" jdbcType="VARCHAR" property="idCardNo" />
    <result column="addr" jdbcType="VARCHAR" property="addr" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="trade_account" jdbcType="VARCHAR" property="tradeAccount" />
    <result column="card_no" jdbcType="VARCHAR" property="cardNo" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="plate" jdbcType="VARCHAR" property="plate" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="sales_type" jdbcType="TINYINT" property="salesType" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="origin_id" jdbcType="BIGINT" property="originId" />
    <result column="origin_name" jdbcType="VARCHAR" property="originName" />
    <result column="weight" jdbcType="DECIMAL" property="weight" />

    <result column="latest_detect_record_id" jdbcType="BIGINT" property="latestDetectRecordId" />
    <result column="latest_detect_time" jdbcType="TIMESTAMP" property="latestDetectTime" />
    <result column="exe_machine_no" jdbcType="VARCHAR" property="exeMachineNo" />
    <result column="version" jdbcType="TINYINT" property="version" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="modified" jdbcType="TIMESTAMP" property="modified" />
    <result column="latest_detect_operator" jdbcType="VARCHAR" property="latestDetectOperator" />
    <result column="latest_pd_result" jdbcType="VARCHAR" property="latestPdResult" />
    <result column="operator_id" jdbcType="BIGINT" property="operatorId" />
    <result column="operator_name" jdbcType="VARCHAR" property="operatorName" />
    <result column="market_id" jdbcType="VARCHAR" property="marketId" />
    <result column="register_head_code" jdbcType="VARCHAR" property="registerHeadCode" />
    <result column="third_party_code" jdbcType="VARCHAR" property="cardNo" />
    <result column="area" jdbcType="VARCHAR" property="area" />
    <result column="measure_type" jdbcType="TINYINT" property="measureType" />
    <result column="piece_num" jdbcType="DECIMAL" property="pieceNum" />
    <result column="piece_weight" jdbcType="DECIMAL" property="pieceWeight" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="delete_user" jdbcType="VARCHAR" property="deleteUser" />
    <result column="delete_time" jdbcType="TIMESTAMP" property="deleteTime" />
    <result column="packaging" jdbcType="VARCHAR" property="packaging" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    id, code, register_source, tally_area_no, name, id_card_no, addr,phone, user_id,sample_code,
    plate, state, sales_type, product_name, product_id, origin_id, origin_name, weight,
    detect_state, latest_detect_record_id, latest_detect_time, exe_machine_no, version,
    created, modified,latest_detect_operator,trade_account,operator_id,operator_name,latest_pd_result,
    market_id, register_head_code, third_party_code, area, measure_type, piece_num, piece_weight,
    remark, create_user, delete_user, delete_time, packaging, order_type
  </sql>
  <select id="selectBy" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <include refid="Base_Column_List" />
    from register_bill
    where id = #{id,jdbcType=BIGINT}
  </select>
  <update id="updateBy" parameterType="com.dili.trace.domain.RegisterBill">
    <!--
      WARNING - @mbg.generated
    -->
    update register_bill
    <set>
      <if test="code != null">
        code = #{code,jdbcType=BIGINT},
      </if>
      <if test="registerSource != null">
        register_source = #{registerSource,jdbcType=TINYINT},
      </if>
      <if test="tallyAreaNo != null">
        tally_area_no = #{tallyAreaNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="idCardNo != null">
        id_card_no = #{idCardNo,jdbcType=VARCHAR},
      </if>
      <if test="addr != null">
        addr = #{addr,jdbcType=VARCHAR},
      </if>
      <if test="tradeAccount != null">
        trade_account = #{tradeAccount,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="plate != null">
        plate = #{plate,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=BIT},
      </if>
      <if test="salesType != null">
        sales_type = #{salesType,jdbcType=BIT},
      </if>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="originId != null">
        origin_id = #{originId,jdbcType=BIGINT},
      </if>
      <if test="originName != null">
        origin_name = #{originName,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="detectState != null">
        detect_state = #{detectState,jdbcType=BIT},
      </if>
      <if test="latestDetectRecordId != null">
        latest_detect_record_id = #{latestDetectRecordId,jdbcType=BIGINT},
      </if>
      <if test="latestDetectTime != null">
        latest_detect_time = #{latestDetectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="exeMachineNo != null">
        exe_machine_no = #{exeMachineNo,jdbcType=VARCHAR},
      </if>
      <if test="operator_id != null">
        operator_id = #{operator_id,jdbcType=BIGINT},
      </if>
      <if test="operatorName != null">
        operator_name = #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=TINYINT},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="modified != null">
        modified = #{modified,jdbcType=TIMESTAMP},
      </if>
      <if test="latestDetectOperator != null">
        latest_detect_operator = #{latestDetectOperator,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="countByVerifyStatus" parameterType="com.dili.trace.domain.RegisterBill" resultType="com.dili.trace.api.output.VerifyStatusCountOutputDto">
    <!--
      WARNING - @mbg.generated
    -->
    select verify_status,count(1) as num
    from register_bill
    where 1=1
    <if test="metadata != null">
      <foreach collection="metadata.entrySet()" item="value" index="key">
        <if test="key =='_andConditionExpr'">
          AND  (${value})
        </if>
      </foreach>
    </if>
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND created <=#{createdEnd}]]>
    </if>

    <if test="billType != null">
      AND bill_type =#{billType}
    </if>
    <if test="isDeleted != null">
      AND is_deleted =#{isDeleted}
    </if>
    <if test="marketId != null">
      AND market_id =#{marketId}
    </if>
    group by verify_status
  </select>

  
  <select id="selectBillReportData"  parameterType="com.dili.trace.dto.TraceReportQueryDto" resultType="com.dili.trace.dto.TraceReportDto">

    select * from (select DISTINCT  area from tally_area_no
    WHERE 1 = 1
    <if test="marketId != null">
      AND market_id = #{marketId}
    </if>)a
    left join  ( <include refid="userCountQuery"/>) t_user_count on t_user_count.group_key=a.area
    left join  ( <include refid="billCountQuery"/>) t_bill_count on t_bill_count.group_key=a.area
    left join  ( <include refid="tradeDetailBuyerCount"/>) t_trade_detail_buyer_count on t_trade_detail_buyer_count.group_key=a.area
<!--    left join  ( <include refid="accountUsageCount"/>) t_usage_count on t_usage_count.group_key=a.area-->
    left join  ( <include refid="greenBillCount"/>) t_green_bill_count on t_green_bill_count.group_key=a.area
    left join  ( <include refid="yellowBillCount"/>) t_yellow_bill_count on t_yellow_bill_count.group_key=a.area
    left join  ( <include refid="redBillCount"/>) t_red_bill_count on t_red_bill_count.group_key=a.area
    left join  ( <include refid="noVerifyedBillCount"/>) t_no_verifyed_bill_count on t_no_verifyed_bill_count.group_key=a.area
  </select>
  <sql  id="userCountQuery">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) user_count,
      </when>
      <otherwise>
        count(1) user_count,
      </otherwise>
    </choose>
    area as group_key from(
    select u.id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from `user` u
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    ) t_area on t_area.user_id=u.id
    where u.yn=1
    and u.state = 1
    and u.validate_state=40
    <if test="marketId != null">
      AND u.market_id = #{marketId}
    </if>
    ) t GROUP  by area
  </sql>

  <sql id="billCountQuery">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) bill_count,
      </when>
      <otherwise>
        count(1) bill_count,
      </otherwise>
    </choose>
    area as group_key
    from(
    select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill
    JOIN `user` u ON u.id=register_bill.user_id and u.market_id = register_bill.market_id
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=register_bill.user_id
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )t GROUP  by area
  </sql>

  <sql id="tradeDetailBuyerCount">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) trade_detail_buyer_count,
      </when>
      <otherwise>
        count(1) trade_detail_buyer_count,
      </otherwise>
    </choose>
    area as group_key
    from(
    select distinct trade_detail.buyer_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from trade_detail
    JOIN `user` u ON u.id=trade_detail.buyer_id
    <if test="marketId != null">
      AND u.market_id = #{marketId}
    </if>
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=trade_detail.buyer_id
    where  trade_detail.parent_id IS NOT NULL
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=trade_detail.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND trade_detail.created <=#{createdEnd}]]>
    </if>
    )t GROUP  by area
  </sql>

    <sql id="accountUsageCount">
        select count(1) usageCount, area as group_key
        from(
          select distinct user_id, is_active, area from (
            select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or
            t_area.area='Others') then 'Others' else t_area.area end area
            from register_bill
            JOIN `user` u ON u.id=register_bill.user_id
            left join (
            select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
            left join tally_area_no
            on r_user_tally_area.tally_area_no_id =tally_area_no.id
            group by r_user_tally_area.user_id
            )t_area on t_area.user_id=register_bill.user_id
            where register_bill.is_deleted=0
            <if test="createdStart != null">
                <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
            </if>
            <if test="createdEnd != null">
                <![CDATA[AND register_bill.created <=#{createdEnd}]]>
            </if>
            <if test="isUserActive != null">
                <![CDATA[AND (u.is_active=1 or u.is_active is null)]]>
            </if>
            union all
            select distinct trade_detail.buyer_id as user_id,u.is_active,case when (t_area.area is null or
            t_area.area='Others') then 'Others' else t_area.area end area
            from trade_detail
            JOIN `user` u ON u.id=trade_detail.buyer_id
            left join (
            select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
            left join tally_area_no
            on r_user_tally_area.tally_area_no_id =tally_area_no.id
            group by r_user_tally_area.user_id
            )t_area on t_area.user_id=trade_detail.buyer_id
            where trade_detail.parent_id IS NOT NULL
            <if test="createdStart != null">
                <![CDATA[ AND #{createdStart}<=trade_detail.created ]]>
            </if>
            <if test="createdEnd != null">
                <![CDATA[AND trade_detail.created <=#{createdEnd}]]>
            </if>
            <if test="isUserActive != null">
                <![CDATA[AND (u.is_active=1 or u.is_active is null)]]>
            </if>
          ) t_union
        )t GROUP  by area
    </sql>

  <sql id="greenBillCount">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) green_bill_count,
      </when>
      <otherwise>
        count(1) green_bill_count,
      </otherwise>
    </choose>
    area as group_key from(
    select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill
    JOIN `user` u ON u.id=register_bill.user_id and u.market_id = register_bill.market_id
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=register_bill.user_id
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )t GROUP  by area
  </sql>


  <sql id="yellowBillCount">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) yellow_bill_count,
      </when>
      <otherwise>
        count(1) yellow_bill_count,
      </otherwise>
    </choose>
    area as group_key
    from(
    select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill
    JOIN `user` u ON u.id=register_bill.user_id and u.market_id = register_bill.market_id
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=register_bill.user_id
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>

    <if test="yellowBillVerifyStatus!=null and yellowBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="yellowBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    AND register_bill.user_id not in(
    select  register_bill.user_id
    from register_bill where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    )
    )t GROUP  by area
  </sql>

  <sql id="redBillCount">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) red_bill_count,
      </when>
      <otherwise>
        count(1) red_bill_count,
      </otherwise>
    </choose>
    area as group_key
    from(
    select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill
    JOIN `user` u ON u.id=register_bill.user_id and u.market_id = register_bill.market_id
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=register_bill.user_id
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>

    <if test="redBillVerifyStatus!=null and redBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="redBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    AND register_bill.user_id not in(
    select  register_bill.user_id
    from register_bill where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    AND ( <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
    register_bill.verify_status
    <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
      #{verifyStatus}
    </foreach>
  </if>
    <if test="yellowBillVerifyStatus!=null and yellowBillVerifyStatus.size()>0">
      OR register_bill.verify_status
      <foreach collection="yellowBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    )
    )

    )t GROUP  by area
  </sql>

  <sql id="noVerifyedBillCount">
    select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) no_verifyed_bill_count,
      </when>
      <otherwise>
        count(1) no_verifyed_bill_count,
      </otherwise>
    </choose>
    area as group_key
    from(
    select distinct register_bill.user_id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill
    JOIN `user` u ON u.id=register_bill.user_id and u.market_id = register_bill.market_id
    left join  (
    select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
    left join tally_area_no
    on r_user_tally_area.tally_area_no_id =tally_area_no.id
    group by r_user_tally_area.user_id
    )t_area on t_area.user_id=register_bill.user_id
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="noneVerifyStatus!=null and noneVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="noneVerifyStatus" open=" IN (" close=")" item="verifyStatus" separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )t GROUP  by area
  </sql>




  <select id="selectRegionCountData" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.RegionCountInfo">
    select case when LOCATE(',',origin_name)>0 then SUBSTRING(origin_name,1,LOCATE(',',origin_name)-1) else origin_name end as region_name,sum(case when weight_unit=1 then weight/2 else weight end) weight
    from register_bill
    where register_bill.is_deleted=0
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    group by case when LOCATE(',',origin_name)>0 then SUBSTRING(origin_name,1,LOCATE(',',origin_name)-1) else origin_name end
  </select>

  <select id="selectReportCountData" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.ReportCountDto">
    select * from (select sum(case when weight_unit=1 then weight/2 else weight end) reportTotal,count(1) reportBatch,0 AS checkBatch
    from register_bill
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )report,

    (select sum(case when weight_unit=1 then total_weight /2 else total_weight end) transactionTotal,count(1) transactionBatch
    from trade_detail
    where trade_detail.parent_id is not null
    and trade_detail.sale_status = 10
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=trade_detail.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND trade_detail.created <=#{createdEnd}]]>
    </if>
    )trans

    ,
    (select   count(1) unqualifiedBatch
    from register_bill
    where register_bill.is_deleted=0
    and verify_status =30
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )unqualified,

    (select   count(distinct product_id ) unqualifiedPdtCount
    from register_bill
    where register_bill.is_deleted=0
    and verify_status =30
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="marketId != null">
      AND register_bill.market_id = #{marketId}
    </if>
    )unqualifiedPdt
  </select>

  <select id="selectRegisterBillReport" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.ReportRegisterBillDto">
    SELECT b.`operator_name` approvalName,b.`verify_status` approvalStatus,b.`operation_time` approvalTime,b.`brand_name` brand,
    b.`created` enterTime, REPLACE(b.`origin_name`,',','-') productionStr,
    b.`spec_name` specification, b.`user_id` thirdAccId, b.`id` thirdEnterId, b.`product_id` thirdGoodsId, b.`product_name` thirdGoodsName,
    b.`upstream_id` thirdUpId, b.`plate` transporterId, IF(b.`weight_unit`=1,'斤','公斤') unitName, b.`weight` enterNum
    FROM `register_bill` b

    WHERE 1=1
    <if test="modifiedEnd != null">
      <![CDATA[AND b.modified <=#{modifiedEnd}]]>
    </if>
    <if test="modifiedStart != null">
      <![CDATA[AND b.modified >#{modifiedStart}]]>
    </if>
    <if test="isDeleted != null">
      <![CDATA[AND b.is_deleted = #{isDeleted}]]>
    </if>
    <if test="marketId != null">
      AND b.market_id = #{marketId}
    </if>
  </select>

  <select id="selectCurrentTime" resultType="java.util.Date">
    SELECT CURRENT_TIMESTAMP
  </select>

  <select id="queryOrigionReport" resultType="com.dili.trace.dto.OrigionReportDto"
          parameterType="com.dili.trace.dto.OrigionReportQueryDto">
    SELECT r.`origin_name` as origion_name, COUNT(1) as bill_count,
    round(SUM(IF(r.weight_unit=1,r.weight*0.0005,r.weight*0.001)),3) as weight
    FROM register_bill r, checkinout_record c
    WHERE r.checkin_status=10 AND r.is_deleted=0 and r.id = c.bill_id and r.market_id = c.market_id
    <if test="startDate != null">
      <![CDATA[AND c.`created`>=#{startDate}]]>
    </if>
    <if test="endDate != null">
      <![CDATA[AND c.`created`<=#{endDate}]]>
    </if>
    <if test="origionName != null and origionName != ''">
      AND r.`origin_name` LIKE #{origionName}
    </if>
    <if test="productName != null and productName != ''">
      AND r.`product_name` LIKE #{productName}
    </if>
    <if test="marketId != null">
      AND r.market_id = #{marketId}
    </if>
    GROUP BY r.`origin_name` order by weight desc;

  </select>

  <select id="queryProductOrigionReport" resultType="com.dili.trace.dto.ProductOrigionReportDto"
          parameterType="com.dili.trace.dto.OrigionReportQueryDto">
    SELECT r.`origin_name` as origion_name, r.product_name as product_name,
    round(SUM(IF(r.weight_unit=1,r.weight*0.0005,r.weight*0.001)),3) as weight
    FROM register_bill r, checkinout_record ch
    WHERE r.checkin_status=10 AND r.is_deleted=0 and r.id = ch.bill_id and r.market_id = ch.market_id
    <if test="startDate != null">
      <![CDATA[AND ch.`created`>=#{startDate}]]>
    </if>
    <if test="endDate != null">
      <![CDATA[AND ch.`created`<=#{endDate}]]>
    </if>
    <if test="origionName != null and origionName != ''">
      AND r.`origin_name` LIKE #{origionName}
    </if>
    <if test="productName != null and productName != ''">
      AND r.`product_name` LIKE #{productName}
    </if>
    <if test="marketId != null">
      AND r.market_id = #{marketId}
    </if>

    GROUP BY r.product_name, r.`origin_name` order by r.product_name,  weight desc, r.origin_name;

  </select>

  <!-- 从寿光合并过来，杭州直接在java中写的sql -->
<!--  <select id="selectByIdForUpdate" parameterType="java.lang.Long" resultMap="BaseResultMap">-->
<!--    select-->
<!--    <include refid="Base_Column_List" />-->
<!--    from register_bill-->
<!--    where id = #{id,jdbcType=BIGINT} for update-->
<!--  </select>-->

  <select id="findUnMatchedRegisterBill" parameterType="com.dili.trace.dto.MatchDetectParam" resultType="com.dili.trace.domain.RegisterBill">
    SELECT   <include refid="Base_Column_List" />  from register_bill
    where `product_name` = #{productName} and `id_card_no` = #{idCardNo}
    and `latest_detect_time` BETWEEN #{start} AND #{end}
    AND register_source = 2
    AND detect_state in(1,3)
    ORDER BY id DESC limit 1
  </select>

  <select id="selectDetectingOrWaitDetectBillId" resultType="com.dili.trace.domain.DetectRequest" >
    select detect_request.* from detect_request left join register_bill
      on detect_request.id=register_bill.detect_request_id
      where register_bill.market_id=#{marketId} and bill_type in(1,6,7)
      and (
       (register_bill.exe_machine_no=#{exeMachineNo} and register_bill.detect_status=40)
       or register_bill.detect_status=30
      )
      order by   register_bill.detect_status DESC
                ,register_bill.bill_type desc
                ,register_bill.id asc
      limit #{taskCount}
  </select>

  <select id="groupByState" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.RegisterBillStaticsDto">
    SELECT SUM( CASE WHEN (`detect_result`=1) THEN 1 ELSE 0 END)AS 'passNum',
    SUM( CASE WHEN (`detect_result`=2) THEN 1 ELSE 0 END) AS 'nopassNum',
    SUM( CASE WHEN (`detect_type`=20)THEN 1 ELSE 0 END) AS 'checkNum',
    SUM( CASE WHEN (`detect_type`=30) THEN 1 ELSE 0 END) AS 'recheckNum',
    SUM( CASE WHEN (`has_origin_certifiy`=1) THEN 1 ELSE 0 END) AS 'hasOriginCertifiyNum',
    SUM( CASE WHEN (`has_detect_report`=1) THEN 1 ELSE 0 END) AS 'hasDetectReportNum',
    SUM( CASE WHEN (`detect_source`=1) THEN 1 ELSE 0 END)AS 'sampleCheckNum',
    SUM( CASE WHEN (`detect_source`=2) THEN 1 ELSE 0 END)AS 'autoCheckNum',
    SUM( CASE WHEN (`check_sheet_id` IS NOT NULL) THEN 1 ELSE 0 END)AS 'hasCheckSheetNum',
    COUNT( DISTINCT `check_sheet_id`)AS 'diffCheckSheetNum'

    from (

    select r.`detect_result`,r.`detect_type`,b.has_origin_certifiy,b.has_detect_report,r.detect_source,b.check_sheet_id
    FROM register_bill b LEFT JOIN detect_request r ON (b.`detect_request_id` = r.`id`)
    where 1=1
    <if test="marketId != null">
      and b.`market_id` = #{marketId}
    </if>
    <if test="registerSource != null">
      and b.`register_source` = #{registerSource,jdbcType=TINYINT}
    </if>
    <if test="verifyStatus != null">
      and b.`verify_status` = #{verifyStatus,jdbcType=BIT}
    </if>
    <if test="detectStatus != null">
      and b.`detect_status` = #{detectStatus,jdbcType=BIT}
    </if>
    <if test="billType !=  null">
      and b.`bill_type` = #{billType}
    </if>
    <if test="createdStart != null ">
      and b.`created`>=  #{createdStart}
    </if>
    <if test="createdEnd != null">
      and #{createdEnd}>= b.`created`
    </if>
    <if test="latestDetectTimeTimeStart != null">
      and b.`latest_detect_time`>=  #{latestDetectTimeTimeStart}
    </if>
    <if test="latestDetectTimeTimeEnd != null">
      and #{latestDetectTimeTimeEnd}>= b.`latest_detect_time`
    </if>

    <if test="attr != null  and attrValue !=''">
      <if test="attr =='name'">
        and b.`name`=#{attrValue}
      </if>
      <if test="attr == 'productName'">
        and b.`product_name` like '${attrValue}%'
      </if>
      <if test="attr == 'likeSampleCode'">
        and b.`sample_code` like '%${attrValue}%'
      </if>
    </if>

    <if test="tradeTypeId != null and tallyAreaNo!='' ">
      and b.`trade_type_id`=#{tradeTypeId}
    </if>

    <if test="hasDetectReport != null">
      and b.`has_detect_report` = #{hasDetectReport}
    </if>
    <if test="hasOriginCertifiy != null">
      and b.`has_origin_certifiy` = #{hasOriginCertifiy}
    </if>
    <if test="hasCheckSheet != null">
      <if test="hasCheckSheet ==true">
        AND (b.`check_sheet_id` is not null)
      </if>
      <if test="hasCheckSheet ==false">
        AND (b.`check_sheet_id` is  null)
      </if>
    </if>
    group by b.id
    )bills
  </select>

  <update id="doRemoveReportAndCertifiy" parameterType="com.dili.trace.domain.RegisterBill">
    <!--
      WARNING - @mbg.generated
    -->
    update register_bill
    <set>
      <if test="originCertifiyUrl == null">
        origin_certifiy_url = null,
      </if>
      <if test="detectReportUrl == null">
        detect_report_url = null,
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

    <delete id="doRemoveReportAndCertifiyNew" parameterType="com.dili.trace.dto.ReportAndCertifiyRemoveDto">
        DELETE FROM image_cert
        WHERE bill_id = #{id}
        <if test="deleteType ==  'all'">
            and cert_type in (1,2)
        </if>
        <if test="deleteType ==  'originCertifiy'">
            and cert_type = 2
        </if>
        <if test="deleteType ==  'detectReport'">
            and cert_type = 1
        </if>
    </delete>

  <select id="listPageGroupByProductCount" parameterType="com.dili.trace.dto.RegisterBillReportQueryDto" resultType="java.lang.Long">
    select
    count(1) as cnt
    from (<include refid="sumGroupByProduct" />) summedData
  </select>

  <select id="listPageGroupByProduct" parameterType="com.dili.trace.dto.RegisterBillReportQueryDto" resultType="com.dili.trace.dto.GroupByProductReportDto">
    select
    ${groupByColumns},/*商品名称*/

    total_weight as totalWeight, /*运输重量*/
    case when mom_total_weight=0.0 then null else (total_weight-mom_total_weight)*100/mom_total_weight end momWeight,
    case when yoy_total_weight=0.0 then null else (total_weight-yoy_total_weight)*100/yoy_total_weight end yoyWeight,

    cnt,/*进场次数*/
    case when mom_cnt=0 then null else (cnt-mom_cnt)*100/mom_cnt end momCnt,
    case when yoy_cnt=0 then null else (cnt-yoy_cnt)*100/yoy_cnt end yoyCnt,

    total_wait_audit as totalWaitAudit,/*待审核*/
    total_already_audit as totalAlreadyAudit,/*已审核*/
    total_checking_or_rechecking as totalCheckingOrRechecking,/*采样客户数量*/
    case when mom_total_checking_or_rechecking=0 then null else (total_checking_or_rechecking-mom_total_checking_or_rechecking)*100/mom_total_checking_or_rechecking end momCheckingOrRechecking,
    case when yoy_total_checking_or_rechecking=0 then null else (total_checking_or_rechecking-yoy_total_checking_or_rechecking)*100/yoy_total_checking_or_rechecking end yoyCheckingOrRechecking,



    total_inital_checking totalInitalChecking,/*初检中数量*/
    total_rechecking as totalRechecking,/*复检中数量*/
    total_checked_or_rechecked as totalCheckedOrRechecked,/*已经检测数量*/
    case when mom_total_checked_or_rechecked=0 then null else (total_checked_or_rechecked-mom_total_checked_or_rechecked)*100/mom_total_checked_or_rechecked end momCheckedOrRechecked,
    case when yoy_total_checked_or_rechecked=0 then null else (total_checked_or_rechecked-yoy_total_checked_or_rechecked)*100/yoy_total_checked_or_rechecked end yoyCheckedOrRechecked,




    total_inital_checked as totalInitalChecked,/*已经初检结束的数量 */
    total_rechecked as totalRechecked,/*已经复检结束的数量 */
    case when mom_total_rechecked=0 then null else (total_rechecked-mom_total_rechecked)*100/mom_total_rechecked end momRechecked,
    case when yoy_total_rechecked=0 then null else (total_rechecked-yoy_total_rechecked)*100/yoy_total_rechecked end yoyRechecked,


    total_successful_checked as totalSuccessfulChecked,/*已经检测成功(初检成功,复检成功)数量 */
    total_successful_inital_checked as totalSuccessfulInitalChecked,/*已经初检成功数量 */

    case when total_successful_inital_checked_and_rechecking=0 then null else total_successful_inital_checked*100/total_successful_inital_checked_and_rechecking end  successful_inital_checked_rate,



    total_successful_rechecked as totalSuccessfulRechecked,/*已经复检成功数量 */
    case when total_successful_rechecked_and_rechecking=0 then null else total_successful_rechecked*100/total_successful_rechecked_and_rechecking end   successful_rechecked_rate,
    total_hascertifiy as totalHascertifiy,/*有产地证明数量*/
    case when cnt=0 then null else total_hascertifiy*100/cnt end  hascertifiy_rate,

    case when mom_total_hascertifiy=0 then null else (total_hascertifiy-mom_total_hascertifiy)*100/mom_total_hascertifiy end momHascertifiy,
    case when yoy_total_hascertifiy=0 then null else (total_hascertifiy-yoy_total_hascertifiy)*100/yoy_total_hascertifiy end yoyHascertifiy,

    total_hasdetectreport as totalHasdetectreport,/*有检测报告数量*/
    case when cnt=0 then null else total_hasdetectreport*100/cnt end  hasdetectreport_rate,
    case when mom_total_hasdetectreport=0 then null else (total_hasdetectreport-mom_total_hasdetectreport)*100/mom_total_hasdetectreport end momHasdetectreport,
    case when yoy_total_hasdetectreport=0 then null else (total_hasdetectreport-yoy_total_hasdetectreport)*100/yoy_total_hasdetectreport end yoyHasdetectreport,

    case when cnt=0 then null else total_checking_or_rechecking*100/cnt end checking_or_rechecking_rate,

    0
    from (<include refid="sumGroupByProduct" />) summedData

    <if test="sort != null">
      ORDER BY ${sort}
      <choose>
        <when test="order != null">
          ${order}
        </when>
        <otherwise>
          desc
        </otherwise>
      </choose>
    </if>
    <if test="offSet!= null and rows!=null">

      limit ${offSet},${rows}
    </if>
  </select>

  <select id="summaryGroup" parameterType="com.dili.trace.dto.RegisterBillReportQueryDto" resultType="com.dili.trace.dto.GroupByProductReportDto">
    select
    sum(total_weight) as totalWeight, /*运输重量*/

    sum(cnt) as cnt,/*进场次数*/

    sum(total_wait_audit) as totalWaitAudit,/*待审核*/
    sum(total_already_audit) as totalAlreadyAudit,/*已审核*/
    sum(total_checking_or_rechecking) as totalCheckingOrRechecking,/*采样客户数量*/



    sum(total_inital_checking) totalInitalChecking,/*初检中数量*/
    sum(total_rechecking) as totalRechecking,/*复检中数量*/
    sum(total_checked_or_rechecked) as totalCheckedOrRechecked,/*已经检测数量*/


    sum(total_inital_checked) as totalInitalChecked,/*已经初检结束的数量 */
    sum(total_rechecked) as totalRechecked,/*已经复检结束的数量 */

    sum(total_successful_checked) as totalSuccessfulChecked,/*已经检测成功(初检成功,复检成功)数量 */
    sum(total_successful_inital_checked) as totalSuccessfulInitalChecked,/*已经初检成功数量 */

    sum(total_successful_rechecked) as totalSuccessfulRechecked,/*已经复检成功数量 */
    sum(total_hascertifiy) as totalHascertifiy,/*有产地证明数量*/

    sum(total_hasdetectreport) as totalHasdetectreport,/*有检测报告数量*/

    0
    from (<include refid="sumGroupByProduct" />) summedData
  </select>

  <sql id="sumGroupByProduct">

    select
    ${groupByColumns},
    sum(cnt)  cnt,
    sum(total_weight)  total_weight,

    sum(total_wait_audit)  total_wait_audit,
    sum(total_already_audit)  total_already_audit,
    sum(total_checking_or_rechecking)  total_checking_or_rechecking,

    sum(total_inital_checking)  total_inital_checking,
    sum(total_rechecking)  total_rechecking,
    sum(total_checked_or_rechecked)  total_checked_or_rechecked,
    sum(total_checked_and_rechecking) total_checked_and_rechecking,
    sum(total_inital_checked)  total_inital_checked,
    sum(total_rechecked)  total_rechecked,
    sum(total_successful_checked)  total_successful_checked,
    sum(total_successful_inital_checked)  total_successful_inital_checked,
    sum(total_successful_rechecked)  total_successful_rechecked,
    sum(total_hascertifiy)  total_hascertifiy,
    sum(total_hasdetectreport)  total_hasdetectreport,

    sum(total_successful_inital_checked_and_rechecking) total_successful_inital_checked_and_rechecking,
    sum(total_successful_rechecked_and_rechecking) total_successful_rechecked_and_rechecking,


    sum(mom_cnt)  mom_cnt,
    sum(mom_total_weight)  mom_total_weight,
    sum(mom_total_wait_audit)  mom_total_wait_audit,
    sum(mom_total_already_audit)  mom_total_already_audit,
    sum(mom_total_checking_or_rechecking)  mom_total_checking_or_rechecking,
    sum(mom_total_inital_checking)  mom_total_inital_checking,
    sum(mom_total_rechecking)  mom_total_rechecking,
    sum(mom_total_checked_or_rechecked)  mom_total_checked_or_rechecked,
    sum(mom_total_inital_checked)  mom_total_inital_checked,
    sum(mom_total_rechecked)  mom_total_rechecked,
    sum(mom_total_successful_checked)  mom_total_successful_checked,
    sum(mom_total_successful_inital_checked)  mom_total_successful_inital_checked,
    sum(mom_total_successful_rechecked)  mom_total_successful_rechecked,
    sum(mom_total_hascertifiy)  mom_total_hascertifiy,
    sum(mom_total_hasdetectreport)  mom_total_hasdetectreport,

    sum(yoy_cnt)  yoy_cnt,
    sum(yoy_total_weight)  yoy_total_weight,
    sum(yoy_total_wait_audit)  yoy_total_wait_audit,
    sum(yoy_total_already_audit)  yoy_total_already_audit,
    sum(yoy_total_checking_or_rechecking)  yoy_total_checking_or_rechecking,
    sum(yoy_total_inital_checking)  yoy_total_inital_checking,
    sum(yoy_total_rechecking)  yoy_total_rechecking,
    sum(yoy_total_checked_or_rechecked)  yoy_total_checked_or_rechecked,
    sum(yoy_total_inital_checked)  yoy_total_inital_checked,
    sum(yoy_total_rechecked)  yoy_total_rechecked,
    sum(yoy_total_successful_checked)  yoy_total_successful_checked,
    sum(yoy_total_successful_inital_checked)  yoy_total_successful_inital_checked,
    sum(yoy_total_successful_rechecked)  yoy_total_successful_rechecked,
    sum(yoy_total_hascertifiy)  yoy_total_hascertifiy,
    sum(yoy_total_hasdetectreport)  yoy_total_hasdetectreport

    from (<include refid="groupByProduct" />)t
    group by
    ${groupByColumns}
  </sql>

  <sql id="groupByProduct">
    select
    ${groupByColumns},
    0 cnt,
    0.0 total_weight,

    0 total_wait_audit,
    0 total_already_audit,
    0 total_checking_or_rechecking,

    0 total_inital_checking,
    0 total_rechecking,
    0 total_checked_or_rechecked,
    0 total_checked_and_rechecking,

    0 total_inital_checked,
    0 total_rechecked,
    0 total_successful_checked,
    0 total_successful_inital_checked,
    0 total_successful_rechecked,
    0 total_hascertifiy,
    0 total_hasdetectreport,
    0 total_successful_inital_checked_and_rechecking,
    0 total_successful_rechecked_and_rechecking,

    0 mom_cnt,
    0.00 mom_total_weight ,
    0 mom_total_wait_audit,
    0 mom_total_already_audit,
    0 mom_total_checking_or_rechecking,
    0 mom_total_inital_checking,
    0 mom_total_rechecking,
    0 mom_total_checked_or_rechecked,
    0 mom_total_inital_checked,
    0 mom_total_rechecked,
    0 mom_total_successful_checked,
    0 mom_total_successful_inital_checked,
    0 mom_total_successful_rechecked,
    0 mom_total_hascertifiy,
    0 mom_total_hasdetectreport,

    0 yoy_cnt,
    0.00 yoy_total_weight ,
    0 yoy_total_wait_audit,
    0 yoy_total_already_audit,
    0 yoy_total_checking_or_rechecking,
    0 yoy_total_inital_checking,
    0 yoy_total_rechecking,
    0 yoy_total_checked_or_rechecked,
    0 yoy_total_inital_checked,
    0 yoy_total_rechecked,
    0 yoy_total_successful_checked,
    0 yoy_total_successful_inital_checked,
    0 yoy_total_successful_rechecked,
    0 yoy_total_hascertifiy,
    0 yoy_total_hasdetectreport

    from
    register_bill
    where 0=1
    union all
    select
    ${groupByColumns},
    count(1) ,
    sum(IFNULL(weight, 0)) ,

    sum(case when state in(1) then 1 else 0 end) ,
    sum(case when state in(7) then 1 else 0 end) ,
    sum(case when state in(4, 5, 6) then 1 else 0 end)  as total_checking_or_rechecking,

    sum(case when detect_state is null and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state in(1, 2) and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state IN (1,2,3,4) then 1 else 0 end) ,
    sum(case when (detect_state IN (3,4))   or (detect_state in (2) and state in (4,5)) then 1 else 0 end) as total_checked_and_rechecking,

    sum(case when detect_state in(1, 2) then 1 else 0 end) ,
    sum(case when detect_state in(3, 4) then 1 else 0 end) ,
    sum(case when detect_state in(1, 3) then 1 else 0 end) ,
    sum(case when detect_state in(1) and state in (6) then 1 else 0 end) ,
    sum(case when detect_state in(3) then 1 else 0 end) ,
    sum(case when origin_certifiy_url is not null and origin_certifiy_url &lt;&gt; '' then 1 else 0 end) ,
    sum(case when detect_report_url is not null and detect_report_url &lt;&gt; '' then 1 else 0 end) ,
    sum(case when detect_state in(1) or ( detect_state in(2) and  state in(4, 5,6)  )then 1 else 0 end) as total_successful_inital_checked_and_rechecking,
    sum(case when detect_state in(3) or ( detect_state in(4) and  state in(4, 5,6)  )then 1 else 0 end) as total_successful_rechecked_and_rechecking,

    0 mom_cnt,
    0.00  ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,

    0 yoy_cnt,
    0.00  ,

    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0

    from
    register_bill
    where
    <include refid="groupByProductCondition" />
    <if test="createdStart!=null">
      AND #{createdStart}&lt;=DATE_FORMAT(created,'%Y-%m-%d')
    </if>
    <if test="createdEnd!=null">
      AND  DATE_FORMAT(created,'%Y-%m-%d') &lt;=#{createdEnd}
    </if>
    group by
    ${groupByColumns}
    union all

    select
    ${groupByColumns},
    0 cnt,
    0.00  ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 as total_checked_and_rechecking,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,


    count(1) mom_cnt ,
    sum(IFNULL(weight, 0)) ,

    sum(case when state in(1) then 1 else 0 end) ,
    sum(case when state in(7) then 1 else 0 end) ,
    sum(case when state in(4, 5, 6) then 1 else 0 end) ,

    sum(case when detect_state is null and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state in(1, 2) and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state IN (1,2,3,4) then 1 else 0 end) ,

    sum(case when detect_state in(1, 2) then 1 else 0 end) ,
    sum(case when detect_state in(3, 4) then 1 else 0 end) ,
    sum(case when detect_state in(1, 3) then 1 else 0 end) ,
    sum(case when detect_state in(1) and state in (6) then 1 else 0 end) ,
    sum(case when detect_state in(3) then 1 else 0 end) ,
    sum(case when origin_certifiy_url is not null and origin_certifiy_url &lt;&gt; '' then 1 else 0 end) ,
    sum(case when detect_report_url is not null and detect_report_url &lt;&gt; '' then 1 else 0 end) ,


    0 yoy_cnt,
    0.00  ,

    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0



    from
    register_bill
    where
    <include refid="groupByProductCondition" />
    <if test="momStart!=null and momEnd!=null">
      AND #{momStart}&lt;=DATE_FORMAT(created,'%Y-%m-%d')
      AND  DATE_FORMAT(created,'%Y-%m-%d') &lt;=#{momEnd}
    </if>
    <if test="momStart==null  or momEnd==null">
      AND 0>id
    </if>
    group by
    ${groupByColumns}
    union all
    select
    ${groupByColumns},
    0 cnt,
    0.00  ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 as total_checked_and_rechecking,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,

    0 mom_cnt ,
    0.00  ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,
    0 ,



    count(1) yoy_cnt ,
    sum(IFNULL(weight, 0)) ,

    sum(case when state in(1) then 1 else 0 end) ,
    sum(case when state in(7) then 1 else 0 end) ,
    sum(case when state in(4, 5, 6) then 1 else 0 end) ,

    sum(case when detect_state is null and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state in(1, 2) and state in(2, 4, 5) then 1 else 0 end) ,
    sum(case when detect_state IN (1,2,3,4) then 1 else 0 end) ,

    sum(case when detect_state in(1, 2)  then 1 else 0 end) ,
    sum(case when detect_state in(3, 4)  then 1 else 0 end) ,
    sum(case when detect_state in(1, 3) then 1 else 0 end) ,
    sum(case when detect_state in(1) and state in (6)  then 1 else 0 end) ,
    sum(case when detect_state in(3) then 1 else 0 end) ,
    sum(case when origin_certifiy_url is not null and origin_certifiy_url  &lt;&gt; '' then 1 else 0 end) ,
    sum(case when detect_report_url is not null and detect_report_url &lt;&gt; '' then 1 else 0 end)



    from
    register_bill
    where
    <include refid="groupByProductCondition" />
    <if test="yoyStart!=null  and yoyEnd!=null">
      AND #{yoyStart}&lt;=DATE_FORMAT(created,'%Y-%m-%d')
      AND  DATE_FORMAT(created,'%Y-%m-%d') &lt;=#{yoyEnd}
    </if>
    <if test="yoyStart==null  or yoyEnd==null">
      AND 0>id
    </if>
    group by
    ${groupByColumns}
  </sql>

  <sql id="groupByProductCondition">
    1=1
    <if test="productName!=''    and productName!=null">
      AND product_name =#{productName}
    </if>
    <if test="likeProductName!=''    and likeProductName!=null">
      AND product_name like '${likeProductName}%'
    </if>
    <if test="billType !=  null">
      AND bill_type = #{billType}
    </if>

    <if test="registerSource!=null">
      AND register_source=#{registerSource}
    </if>
    <if test="tradeTypeId!=null   and tradeTypeId!='' ">
      AND trade_type_id=#{tradeTypeId}
    </if>
    <if test="plate!=null  and plate!=''">
      AND plate like '${plate}%'
    </if>
    <if test="hasCheckSheet !=null ">
      <if test="hasCheckSheet==true">
        AND check_sheet_id  IS NOT NULL
      </if>
      <if test="hasCheckSheet==false">
        AND check_sheet_id  IS NULL
      </if>
    </if>
    <if test="productIdList != null and productIdList.size()>0">
      AND product_id IN
      <foreach collection="productIdList" open="(" separator=","
               close=")" item="productId">
        #{productId}
      </foreach>
    </if>
  </sql>

  <select id="queryListByExample" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.RegisterBillDto">
    SELECT
    b.id,
    b.id billId,
    b.`created`,
    b.`bill_type`,
    b.`regist_type`,
    b.`code`,
    b.`sample_code`,
    b.`register_source`,
    b.`name`,
    b.`corporate_name`,
    b.`plate`,
    b.`brand_id`,
    b.`brand_name`,
    b.`preserve_type`,
    b.`product_id`,
    b.`product_name`,
    b.`product_alias_name`,
    b.`origin_id`,
    b.`origin_name`,
    b.`weight`,
    b.`weight_unit`,
    b.`measure_type`,
    b.`piece_num`,
    b.`piece_weight`,
    b.`has_detect_report`,
    b.`has_origin_certifiy`,
    b.`has_handle_result`,
    b.`verify_status`,
    b.`detect_status`,
    b.`detect_request_id`,
    r.`sample_time`,
    r.`detect_source`,
    r.`detect_time`,
    r.`detect_result`,
    r.`detect_type`,
    r.`detector_name`,
    b.`check_sheet_id`,
    b.`checkin_status`,
    b.trade_account,
    b.trade_type_id,
    b.trade_type_name,
    b.is_print_checksheet,
    checkinout_record.`created` checkinCreated,
    detect_record.`normal_result` normalResult,
    detect_record.`pd_result` pdResult,
    b.`is_deleted`,
    b.`source_name`,
    b.`source_id`,
    group_concat(register_tallyarea_no.tallyarea_no  order by register_tallyarea_no.id ASC separator ',') as tallynos
    FROM register_bill b
    LEFT JOIN detect_request r ON (r.id = b.detect_request_id)
    LEFT JOIN  detect_record on detect_record.detect_request_id=r.id
    LEFT JOIN checkinout_record ON checkinout_record.bill_id =r.id and checkinout_record.`inout` =10 and checkinout_record.status =10
    LEFT JOIN  register_tallyarea_no  on b.id= register_tallyarea_no.bill_id and register_tallyarea_no.bill_type=#{billType}
    WHERE 1 = 1
    <if test="createdStart != null">
      <![CDATA[ AND b.created >= #{createdStart} ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[ AND b.created <= #{createdEnd} ]]>
    </if>
    <if test="checkinCreatedStart != null">
      <![CDATA[ AND checkinout_record.created >= #{checkinCreatedStart} ]]>
    </if>
    <if test="checkinCreatedEnd != null">
      <![CDATA[ AND checkinout_record.created <= #{checkinCreatedEnd} ]]>
    </if>
    <if test="latestDetectTimeTimeStart != null">
      <![CDATA[ AND r.detect_time >= #{latestDetectTimeTimeStart} ]]>
    </if>
    <if test="latestDetectTimeTimeEnd != null">
      <![CDATA[ AND r.detect_time <= #{latestDetectTimeTimeEnd} ]]>
    </if>
    <if test="registerSource != null">
      AND b.register_source =#{registerSource}
    </if>
    <if test="verifyStatus != null">
      AND b.verify_status =#{verifyStatus}
    </if>
    <if test="detectStatus != null">
      AND b.detect_status =#{detectStatus}
    </if>
    <if test="hasDetectReport != null">
      AND b.has_detect_report =#{hasDetectReport}
    </if>
    <if test="hasOriginCertifiy != null">
      AND b.has_origin_certifiy =#{hasOriginCertifiy}
    </if>
    <if test="hasHandleResult != null">
      AND b.has_handle_result =#{hasHandleResult}
    </if>
    <if test="likePlate != null">
      AND b.plate like '%${likePlate}%'
    </if>
    <if test="likeName != null">
      AND b.name like '%${likeName}%'
    </if>
    <if test="likeCode != null">
      AND b.code like '%${likeCode}%'
    </if>
    <if test="likePhone != null">
      AND b.phone like '%${likePhone}%'
    </if>
    <if test="productName != null">
      AND b.product_name like '%${productName}%'
    </if>
    <if test="likeProductName != null">
      AND b.product_name like '%${likeProductName}%'
    </if>
    <if test="originName != null">
      AND b.origin_name like '%${originName}%'
    </if>

    <if test="isDeleted != null">
      AND b.is_deleted =#{isDeleted}
    </if>
    <if test="detectType != null">
      AND r.detect_type =#{detectType}
    </if>
    <if test="detectResult != null">
      AND r.detect_result =#{detectResult}
    </if>
    <if test="marketId != null">
      AND b.market_id =#{marketId}
    </if>
    <if test="registType != null">
      AND b.regist_type =#{registType}
    </if>
    <if test="billType != null">
      AND b.bill_type =#{billType}
    </if>
    <if test="name != null">
      AND b.name like '%${name}%'
    </if>
    <if test="likeSampleCode != null">
      AND b.sample_code like '%${likeSampleCode}%'
    </if>
    <if test="billTypes != null">
      AND b.bill_type
      <foreach collection="billTypes" open=" IN (" close=")" item="billType" separator=",">
        #{billType}
      </foreach>
    </if>
    group by b.id
  </select>
</mapper>