<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.trace.dao.RegisterBillMapper">
  <resultMap id="BaseResultMap" type="com.dili.trace.domain.RegisterBill">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="id_card_no" jdbcType="VARCHAR" property="idCardNo" />
    <result column="addr" jdbcType="VARCHAR" property="addr" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="plate" jdbcType="VARCHAR" property="plate" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="origin_id" jdbcType="BIGINT" property="originId" />
    <result column="origin_name" jdbcType="VARCHAR" property="originName" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="detect_state" jdbcType="TINYINT" property="detectState" />
    <result column="latest_detect_record_id" jdbcType="BIGINT" property="latestDetectRecordId" />
    <result column="latest_detect_time" jdbcType="TIMESTAMP" property="latestDetectTime" />
    <result column="version" jdbcType="TINYINT" property="version" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="modified" jdbcType="TIMESTAMP" property="modified" />
    <result column="latest_detect_operator" jdbcType="VARCHAR" property="latestDetectOperator" />
    <result column="latest_pd_result" jdbcType="VARCHAR" property="latestPdResult" />
    <result column="operator_id" jdbcType="BIGINT" property="operatorId" />
    <result column="operator_name" jdbcType="VARCHAR" property="operatorName" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
    -->
    id, code, register_source, tally_area_no, name, id_card_no, addr,phone, user_id,sample_code,
    plate, state, sales_type, product_name, product_id, origin_id, origin_name, weight,
    detect_state, latest_detect_record_id, latest_detect_time, exe_machine_no, version, 
    created, modified,latest_detect_operator,trade_account,operator_id,operator_name,latest_pd_result
  </sql>
  <select id="selectBy" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
    -->
    select
    <include refid="Base_Column_List" />
    from register_bill
    where id = #{id,jdbcType=BIGINT}
  </select>
  <update id="updateBy" parameterType="com.dili.trace.domain.RegisterBill">
    <!--
      WARNING - @mbg.generated
    -->
    update register_bill
    <set>
      <if test="code != null">
        code = #{code,jdbcType=BIGINT},
      </if>
      <if test="registerSource != null">
        register_source = #{registerSource,jdbcType=TINYINT},
      </if>
      <if test="tallyAreaNo != null">
        tally_area_no = #{tallyAreaNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="idCardNo != null">
        id_card_no = #{idCardNo,jdbcType=VARCHAR},
      </if>
      <if test="addr != null">
        addr = #{addr,jdbcType=VARCHAR},
      </if>
      <if test="tradeAccount != null">
        trade_account = #{tradeAccount,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="plate != null">
        plate = #{plate,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=BIT},
      </if>
      <if test="salesType != null">
        sales_type = #{salesType,jdbcType=BIT},
      </if>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="originId != null">
        origin_id = #{originId,jdbcType=BIGINT},
      </if>
      <if test="originName != null">
        origin_name = #{originName,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="detectState != null">
        detect_state = #{detectState,jdbcType=BIT},
      </if>
      <if test="latestDetectRecordId != null">
        latest_detect_record_id = #{latestDetectRecordId,jdbcType=BIGINT},
      </if>
      <if test="latestDetectTime != null">
        latest_detect_time = #{latestDetectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="exeMachineNo != null">
        exe_machine_no = #{exeMachineNo,jdbcType=VARCHAR},
      </if>
      <if test="operator_id != null">
        operator_id = #{operator_id,jdbcType=BIGINT},
      </if>
      <if test="operatorName != null">
        operator_name = #{operatorName,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=TINYINT},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="modified != null">
        modified = #{modified,jdbcType=TIMESTAMP},
      </if>
      <if test="latestDetectOperator != null">
        latest_detect_operator = #{latestDetectOperator,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="countByVerifyStatus" parameterType="com.dili.trace.domain.RegisterBill" resultType="com.dili.trace.api.output.VerifyStatusCountOutputDto">
    <!--
      WARNING - @mbg.generated
    -->
    select verify_status,count(1) as num
    from register_bill
    where 1=1
    <if test="metadata != null">
      <foreach collection="metadata.entrySet()" item="value" index="key">
        <if test="key =='_andConditionExpr'">
          AND  (${value})
        </if>
      </foreach>
    </if>
    <if test="createdStart != null  and createdStart != ''">
      <![CDATA[ AND #{createdStart}<=created ]]>
    </if>
    <if test="createdEnd != null  and createdEnd != ''">
      <![CDATA[AND created <=#{createdEnd}]]>
    </if>
    <if test="billType != null">
      AND bill_type =#{billType}
    </if>
    <if test="isDeleted != null">
      AND is_deleted =#{isDeleted}
    </if>
    group by verify_status
  </select>


  <select id="selectUserIdWithouBill" parameterType="com.dili.trace.dto.UserListDto" resultType="java.lang.Long">
    select id from `user` where id not in(
    select user_id from register_bill where is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND created <=#{createdEnd}]]>
    </if>
    )
    <![CDATA[ AND `user`.qr_status <>#{qrStatus}]]>

  </select>
  <select id="selectBillReportData"  parameterType="com.dili.trace.dto.TraceReportQueryDto" resultType="com.dili.trace.dto.TraceReportDto">

    select * from (select DISTINCT  area from tally_area_no)a
    left join  ( <include refid="userCountQuery"/>) t_user_count on t_user_count.group_key=a.area
    left join  ( <include refid="billCountQuery"/>) t_bill_count on t_bill_count.group_key=a.area
    left join  ( <include refid="tradeDetailBuyerCount"/>) t_trade_detail_buyer_count on t_trade_detail_buyer_count.group_key=a.area
    left join  ( <include refid="greenBillCount"/>) t_green_bill_count on t_green_bill_count.group_key=a.area
    left join  ( <include refid="yellowBillCount"/>) t_yellow_bill_count on t_yellow_bill_count.group_key=a.area
    left join  ( <include refid="redBillCount"/>) t_red_bill_count on t_red_bill_count.group_key=a.area
    left join  ( <include refid="noVerifyedBillCount"/>) t_no_verifyed_bill_count on t_no_verifyed_bill_count.group_key=a.area
  </select>
  <sql  id="userCountQuery">
  select
    <choose>
      <when test="isUserActive != null">
        count(t.is_active=1 or null) user_count,
      </when>
      <otherwise>
        count(1) user_count,
      </otherwise>
    </choose>
   area as group_key from(
    select u.id as user_id,u.is_active,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from `user` u 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      ) t_area on t_area.user_id=u.id
     where u.yn=1
     and u.state = 1
     and u.validate_state=40
    ) t GROUP  by area
</sql>

<sql id="billCountQuery">
  select count(1) bill_count,area as group_key from(
    select distinct register_bill.user_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=register_bill.user_id 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    )t GROUP  by area
</sql>

<sql id="tradeDetailBuyerCount">
  select count(1) trade_detail_buyer_count,area as group_key from(
    select distinct trade_detail.buyer_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from trade_detail 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=trade_detail.buyer_id 
    where  trade_detail.parent_id IS NOT NULL
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=trade_detail.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND trade_detail.created <=#{createdEnd}]]>
    </if>
    )t GROUP  by area
</sql>

<sql id="greenBillCount">
  select count(1) green_bill_count,area as group_key from(
    select distinct register_bill.user_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=register_bill.user_id 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>

    
    )t GROUP  by area
</sql>


<sql id="yellowBillCount">
  select count(1) yellow_bill_count,area as group_key from(
    select distinct register_bill.user_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=register_bill.user_id 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>

    <if test="yellowBillVerifyStatus!=null and yellowBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="yellowBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>
      AND register_bill.user_id not in(
        select  register_bill.user_id 
        from register_bill where register_bill.is_deleted=0
        <if test="createdStart != null">
          <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
        </if>
        <if test="createdEnd != null">
          <![CDATA[AND register_bill.created <=#{createdEnd}]]>
        </if>
        <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
          AND register_bill.verify_status
          <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
            #{verifyStatus}
          </foreach>
        </if>
      )
    )t GROUP  by area
</sql>

<sql id="redBillCount">
  select count(1) red_bill_count,area as group_key from(
    select distinct register_bill.user_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=register_bill.user_id 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>

    <if test="redBillVerifyStatus!=null and redBillVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="redBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
        #{verifyStatus}
      </foreach>
    </if>

    AND register_bill.user_id not in(
      select  register_bill.user_id 
      from register_bill where register_bill.is_deleted=0
     <if test="createdStart != null">
        <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
      </if>
      <if test="createdEnd != null">
        <![CDATA[AND register_bill.created <=#{createdEnd}]]>
      </if>
      AND ( <if test="greenBillVerifyStatus!=null and greenBillVerifyStatus.size()>0">
         register_bill.verify_status
        <foreach collection="greenBillVerifyStatus" open="IN (" close=")" item="verifyStatus"  separator=",">
          #{verifyStatus}
        </foreach>
      </if>
      <if test="yellowBillVerifyStatus!=null and yellowBillVerifyStatus.size()>0">
        OR register_bill.verify_status
        <foreach collection="yellowBillVerifyStatus" open=" IN (" close=")" item="verifyStatus"  separator=",">
          #{verifyStatus}
        </foreach>
      </if>
    )
    )

    )t GROUP  by area
</sql>

<sql id="noVerifyedBillCount">
  select count(1) no_verifyed_bill_count,area as group_key from(
    select distinct register_bill.user_id as user_id,case when (t_area.area is null or t_area.area='Others') then 'Others' else   t_area.area end area
    from register_bill 
    left join  (
      select r_user_tally_area.user_id ,min(tally_area_no.area ) area from r_user_tally_area
      left join tally_area_no  
      on r_user_tally_area.tally_area_no_id =tally_area_no.id  
      group by r_user_tally_area.user_id 
      )t_area on t_area.user_id=register_bill.user_id 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    <if test="noneVerifyStatus!=null and noneVerifyStatus.size()>0">
      AND register_bill.verify_status
      <foreach collection="noneVerifyStatus" open=" IN (" close=")" item="verifyStatus" separator=",">
        #{verifyStatus}
      </foreach>
    </if>
    )t GROUP  by area
</sql>




<select id="selectRegionCountData" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.RegionCountInfo">
    select case when LOCATE(',',origin_name)>0 then SUBSTRING(origin_name,1,LOCATE(',',origin_name)-1) else origin_name end as region_name,sum(case when weight_unit=1 then weight/2 else weight end) weight
    from register_bill 
    where register_bill.is_deleted=0
    group by case when LOCATE(',',origin_name)>0 then SUBSTRING(origin_name,1,LOCATE(',',origin_name)-1) else origin_name end
</select>

<select id="selectReportCountData" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.ReportCountDto">
  select * from (select sum(case when weight_unit=1 then weight/2 else weight end) reportTotal,count(1) reportBatch,0 AS checkBatch
    from register_bill 
    where register_bill.is_deleted=0
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
  )report,
    
  (select sum(case when weight_unit=1 then total_weight /2 else total_weight end) transactionTotal,count(1) transactionBatch
    from trade_detail 
    where trade_detail.parent_id is not null
    and trade_detail.sale_status = 10
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=trade_detail.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND trade_detail.created <=#{createdEnd}]]>
    </if>
    )trans
    
     ,
    (select   count(1) unqualifiedBatch
    from register_bill 
    where register_bill.is_deleted=0
    and verify_status =30
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    )unqualified,
    
   (select   count(distinct product_id ) unqualifiedPdtCount
    from register_bill 
    where register_bill.is_deleted=0
    and verify_status =30
    <if test="createdStart != null">
      <![CDATA[ AND #{createdStart}<=register_bill.created ]]>
    </if>
    <if test="createdEnd != null">
      <![CDATA[AND register_bill.created <=#{createdEnd}]]>
    </if>
    )unqualifiedPdt
</select>

  <select id="selectRegisterBillReport" parameterType="com.dili.trace.dto.RegisterBillDto" resultType="com.dili.trace.dto.thirdparty.report.ReportRegisterBillDto">
    SELECT b.`operator_name` approvalName,b.`verify_status` approvalStatus,b.`operation_time` approvalTime,b.`brand_name` brand,
      b.`created` enterTime, REPLACE(b.`origin_name`,',','-') productionStr,
      b.`spec_name` specification, b.`user_id` thirdAccId, b.`id` thirdEnterId, b.`product_id` thirdGoodsId, c.`name` thirdGoodsName,
      b.`upstream_id` thirdUpId, b.`plate` transporterId, IF(b.`weight_unit`=1,'斤','公斤') unitName, b.`weight` enterNum
    FROM `register_bill` b
    JOIN `category` c ON b.product_id = c.id
    WHERE 1=1
      <if test="modifiedEnd != null">
          <![CDATA[AND b.modified <=#{modifiedEnd}]]>
      </if>
      <if test="modifiedStart != null">
          <![CDATA[AND b.modified >#{modifiedStart}]]>
      </if>
        <if test="isDeleted != null">
        <![CDATA[AND b.is_deleted = #{isDeleted}]]>
      </if>
  </select>

  <select id="selectCurrentTime" resultType="java.util.Date">
    SELECT CURRENT_TIMESTAMP
  </select>

  <select id="queryOrigionReport" resultType="com.dili.trace.dto.OrigionReportDto"
          parameterType="com.dili.trace.dto.OrigionReportQueryDto">
    SELECT r.`origin_name` as origion_name, COUNT(1) as bill_count,
    round(SUM(IF(r.weight_unit=1,r.weight*0.0005,r.weight*0.001)),3) as weight
    FROM register_bill r, checkinout_record c WHERE r.`is_checkin`=1 AND r.is_deleted=0 and r.id = c.bill_id
    <if test="startDate != null">
      <![CDATA[AND c.`created`>=#{startDate}]]>
    </if>
    <if test="endDate != null">
      <![CDATA[AND c.`created`<=#{endDate}]]>
    </if>
    <if test="origionName != null and origionName != ''">
        AND r.`origin_name` LIKE #{origionName}
    </if>
    <if test="productName != null and productName != ''">
      AND r.`product_name` LIKE #{productName}
    </if>

    GROUP BY r.`origin_name` order by weight desc;

  </select>

  <select id="queryProductOrigionReport" resultType="com.dili.trace.dto.ProductOrigionReportDto"
          parameterType="com.dili.trace.dto.OrigionReportQueryDto">
    SELECT r.`origin_name` as origion_name, r.product_name as product_name,
    round(SUM(IF(r.weight_unit=1,r.weight*0.0005,r.weight*0.001)),3) as weight
    FROM register_bill r, checkinout_record ch
    WHERE r.`is_checkin`=1 AND r.is_deleted=0 and r.id = ch.bill_id
    <if test="startDate != null">
      <![CDATA[AND ch.`created`>=#{startDate}]]>
    </if>
    <if test="endDate != null">
      <![CDATA[AND ch.`created`<=#{endDate}]]>
    </if>
    <if test="origionName != null and origionName != ''">
      AND r.`origin_name` LIKE #{origionName}
    </if>
    <if test="productName != null and productName != ''">
      AND r.`product_name` LIKE #{productName}
    </if>

    GROUP BY r.product_name, r.`origin_name` order by r.product_name,  weight desc, r.origin_name;

  </select>

</mapper>